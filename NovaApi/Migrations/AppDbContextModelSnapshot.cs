// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace NovaAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Pizzas Salgadas"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Pizzas Doces"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Entradas e Petiscos"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Refrigerantes"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Sucos Naturais"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Água"
                        },
                        new
                        {
                            Id = 7,
                            Nome = "Cervejas"
                        },
                        new
                        {
                            Id = 8,
                            Nome = "Vinhos"
                        },
                        new
                        {
                            Id = 9,
                            Nome = "Sobremesas"
                        });
                });

            modelBuilder.Entity("Extra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("PrecoAdicional")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.ToTable("Extras");
                });

            modelBuilder.Entity("Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("ItemPedido", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("ProdutoId", "PedidoId");

                    b.HasIndex("PedidoId");

                    b.ToTable("ItensPedido");
                });

            modelBuilder.Entity("Mesa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Mesas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Mesa 01"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Mesa 02"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Mesa 03"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Mesa 04"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Mesa 05"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Mesa 06"
                        },
                        new
                        {
                            Id = 7,
                            Nome = "Mesa 07"
                        });
                });

            modelBuilder.Entity("Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataHoraFim")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataHoraInicio")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<int>("MesaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("MesaId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Foto")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Produtos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaId = 1,
                            Descricao = "Molho de tomate, mussarela, rodelas de calabresa de primeira qualidade e cebola fatiada",
                            Foto = "./imgs/pizza_calabresa.jpg",
                            Nome = "Calabresa",
                            Preco = 30.00m
                        },
                        new
                        {
                            Id = 2,
                            CategoriaId = 1,
                            Descricao = "Molho de tomate, mussarela, rodelas de tomate fresco, manjericão fresco e um toque de parmesão",
                            Foto = "./imgs/pizza-marguerita.jpg",
                            Nome = "Marguerita",
                            Preco = 32.00m
                        },
                        new
                        {
                            Id = 3,
                            CategoriaId = 1,
                            Descricao = "Molho de tomate, mussarela, presunto, ovos cozidos, cebola, azeitonas pretas e orégano",
                            Foto = "./imgs/pizza-portuguesa.jpg",
                            Nome = "Portuguesa",
                            Preco = 35.00m
                        },
                        new
                        {
                            Id = 4,
                            CategoriaId = 2,
                            Descricao = "Delicioso chocolate ao leite derretido (opcional: granulado)",
                            Foto = "./imgs/pizza-chocolate.jpg",
                            Nome = "Chocolate Preto",
                            Preco = 30.00m
                        },
                        new
                        {
                            Id = 5,
                            CategoriaId = 2,
                            Descricao = "Chocolate branco derretido com morangos frescos fatiados",
                            Foto = "./imgs/pizza-choco-morango.jpg",
                            Nome = "Chocolate Branco com Morango",
                            Preco = 35.00m
                        },
                        new
                        {
                            Id = 6,
                            CategoriaId = 3,
                            Descricao = "Pão baguete com pasta de alho caseira, gratinado com queijo (Unidade)",
                            Foto = "./imgs/pao-alho.jpg",
                            Nome = "Pão de Alho Tradicional",
                            Preco = 8.00m
                        },
                        new
                        {
                            Id = 7,
                            CategoriaId = 3,
                            Descricao = "Porção de calabresa fatiada e salteada com cebola. Acompanha pão.",
                            Foto = "./imgs/calabresa-acebolada.jpg",
                            Nome = "Calabresa Acebolada",
                            Preco = 38.00m
                        },
                        new
                        {
                            Id = 8,
                            CategoriaId = 4,
                            Descricao = "Lata 350ml",
                            Foto = "./imgs/coca-cola-lata.jpg",
                            Nome = "Coca-Cola",
                            Preco = 6.00m
                        },
                        new
                        {
                            Id = 9,
                            CategoriaId = 4,
                            Descricao = "Lata 350ml",
                            Foto = "./imgs/guarana-lata.jpg",
                            Nome = "Guaraná Antarctica",
                            Preco = 6.00m
                        },
                        new
                        {
                            Id = 10,
                            CategoriaId = 5,
                            Descricao = "Natural - Copo 400ml",
                            Foto = "./imgs/suco-laranja.jpg",
                            Nome = "Suco de Laranja",
                            Preco = 9.00m
                        },
                        new
                        {
                            Id = 11,
                            CategoriaId = 5,
                            Descricao = "Polpa/Natural - Copo 400ml",
                            Foto = "./imgs/suco-abacaxi.jpg",
                            Nome = "Suco de Abacaxi",
                            Preco = 9.00m
                        },
                        new
                        {
                            Id = 12,
                            CategoriaId = 6,
                            Descricao = "Garrafa 500ml",
                            Foto = "./imgs/agua-sem-gas.jpg",
                            Nome = "Água Mineral Sem Gás",
                            Preco = 4.00m
                        },
                        new
                        {
                            Id = 13,
                            CategoriaId = 6,
                            Descricao = "Garrafa 500ml",
                            Foto = "./imgs/agua-com-gas.jpg",
                            Nome = "Água Mineral Com Gás",
                            Preco = 4.50m
                        },
                        new
                        {
                            Id = 14,
                            CategoriaId = 7,
                            Descricao = "Lata 350ml",
                            Foto = "./imgs/cerveja-skol.jpg",
                            Nome = "Skol",
                            Preco = 7.00m
                        },
                        new
                        {
                            Id = 15,
                            CategoriaId = 7,
                            Descricao = "Lata 350ml",
                            Foto = "./imgs/cerveja-brahma.jpg",
                            Nome = "Brahma",
                            Preco = 7.00m
                        },
                        new
                        {
                            Id = 16,
                            CategoriaId = 8,
                            Descricao = "Taça - Cabernet Sauvignon ou Merlot",
                            Foto = "./imgs/vinho-tinto-taca.jpg",
                            Nome = "Vinho Tinto da Casa",
                            Preco = 20.00m
                        },
                        new
                        {
                            Id = 17,
                            CategoriaId = 8,
                            Descricao = "Taça - Sauvignon Blanc",
                            Foto = "./imgs/vinho-branco-taca.jpg",
                            Nome = "Vinho Branco da Casa",
                            Preco = 20.00m
                        },
                        new
                        {
                            Id = 18,
                            CategoriaId = 9,
                            Descricao = "Mousse de maracujá com açúcar",
                            Foto = "./imgs/mousse-maracuja.jpg",
                            Nome = "Mousse de Maracujá",
                            Preco = 12.00m
                        },
                        new
                        {
                            Id = 19,
                            CategoriaId = 9,
                            Descricao = "300ml - Açaí com granola e banana",
                            Foto = "./imgs/acai-tigela.jpg",
                            Nome = "Açaí na Tigela",
                            Preco = 22.00m
                        });
                });

            modelBuilder.Entity("Extra", b =>
                {
                    b.HasOne("Produto", "Produto")
                        .WithMany("Extras")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("ItemPedido", b =>
                {
                    b.HasOne("Pedido", "Pedido")
                        .WithMany("ItensPedido")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Produto", "Produto")
                        .WithMany("ItensPedido")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Pedido", b =>
                {
                    b.HasOne("Funcionario", "Funcionario")
                        .WithMany("Pedidos")
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mesa", "Mesa")
                        .WithMany("Pedidos")
                        .HasForeignKey("MesaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcionario");

                    b.Navigation("Mesa");
                });

            modelBuilder.Entity("Produto", b =>
                {
                    b.HasOne("Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Categoria", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("Funcionario", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Mesa", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Pedido", b =>
                {
                    b.Navigation("ItensPedido");
                });

            modelBuilder.Entity("Produto", b =>
                {
                    b.Navigation("Extras");

                    b.Navigation("ItensPedido");
                });
#pragma warning restore 612, 618
        }
    }
}
